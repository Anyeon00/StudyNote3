13-2 고급자바 Reflection API

- 런타임 시에 이미 로드된 클래스내에서 다른 클래스를 동적으로 로드하여 생성자, 필드, 메소드 등에 access할 수 있는 기능
- 클래스내에 모든정보를 access 
_class record객체에 들어잇음 
_Class클래스객체 
_구현중인 interface, super class, 클래스이름, 데이터멤버, 데이터멤버의타입/이름/초기값, 멤버function, 멤버function의 이름/return type/argument, argument의 타입 
_parse tree자료구조로 만든 객체임
=> 이 class record에 access하는 기술이 : Reflection


Class<T> 클래스

- getDeclaredFields() 어떤 클래스에 속하는 data 멤버들을 갖고옴, Field[ ] 에 저장
* Field f = ~;
String s = f.getModifiers()	// public같은거
f.getType()	// field 타입
f.getName()	// field 네임

- Field[ ] f = class.getDeclaredFields() // class의 data member들을 갖고옴
* Field객체.getName() // data member의 이름을 갖고옴
- Method[ ] m =  class.getDeclaredMethods() // class의 member function들을 갖고옴
* Method객체.getName() // member function의 이름을 갖고옴
- getInterfaces() 구현하고있는 인터페이스들을 갖고옴, Class[ ]에 저장
- isInterface()	// 인터페이스인지
- getSuperClass()	// 수퍼클래스를 갖고옴


ex)
Class Student{~}
Class c = Class.forName(Student);	
Object o = c.newInstance();  // Student클래스에 대한 class record객체 생성
if(c.isInterface()){		// 인터페이스인지

}else if (c.getSuperClass() != null){	// 수퍼클래스잇는지

}
String s = c.getName() // Student클래스의 클래스풀네임을 가져옴



Command : 명령어(호출)를 객체화 시킨다
x.move(10,20;
=>
[x m o] : Command
=>
m.invoke(x,o);

그러니까
자바에서는 
car.move(10);
C에서는
move(car,10);
인데
move함수자체를 객체화시켜 C스타일로 사용함 -> 함수를 가리키는 레퍼런스 즉, 함수 레퍼런스가 생김
따라서(move함수를 가리키는 레퍼런스가 m이라치면) m.invoke(car,10) 은 move함수 m을 호출하는데 car와 10을 argument로, 이렇게 호출할때는 어떤함수레퍼런스든 invoke()를 사용해 호출







